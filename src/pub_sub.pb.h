// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pub_sub.proto

#ifndef PROTOBUF_INCLUDED_pub_5fsub_2eproto
#define PROTOBUF_INCLUDED_pub_5fsub_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pub_5fsub_2eproto 

namespace protobuf_pub_5fsub_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pub_5fsub_2eproto
namespace pubsub {
class PublishMessage;
class PublishMessageDefaultTypeInternal;
extern PublishMessageDefaultTypeInternal _PublishMessage_default_instance_;
class PublishedTime;
class PublishedTimeDefaultTypeInternal;
extern PublishedTimeDefaultTypeInternal _PublishedTime_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class SubscribeInfo;
class SubscribeInfoDefaultTypeInternal;
extern SubscribeInfoDefaultTypeInternal _SubscribeInfo_default_instance_;
}  // namespace pubsub
namespace google {
namespace protobuf {
template<> ::pubsub::PublishMessage* Arena::CreateMaybeMessage<::pubsub::PublishMessage>(Arena*);
template<> ::pubsub::PublishedTime* Arena::CreateMaybeMessage<::pubsub::PublishedTime>(Arena*);
template<> ::pubsub::ReceivedMessage* Arena::CreateMaybeMessage<::pubsub::ReceivedMessage>(Arena*);
template<> ::pubsub::SubscribeInfo* Arena::CreateMaybeMessage<::pubsub::SubscribeInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pubsub {

// ===================================================================

class PublishMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pubsub.PublishMessage) */ {
 public:
  PublishMessage();
  virtual ~PublishMessage();

  PublishMessage(const PublishMessage& from);

  inline PublishMessage& operator=(const PublishMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishMessage(PublishMessage&& from) noexcept
    : PublishMessage() {
    *this = ::std::move(from);
  }

  inline PublishMessage& operator=(PublishMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishMessage* internal_default_instance() {
    return reinterpret_cast<const PublishMessage*>(
               &_PublishMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PublishMessage* other);
  friend void swap(PublishMessage& a, PublishMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishMessage* New() const final {
    return CreateMaybeMessage<PublishMessage>(NULL);
  }

  PublishMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishMessage& from);
  void MergeFrom(const PublishMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string review = 3;
  void clear_review();
  static const int kReviewFieldNumber = 3;
  const ::std::string& review() const;
  void set_review(const ::std::string& value);
  #if LANG_CXX11
  void set_review(::std::string&& value);
  #endif
  void set_review(const char* value);
  void set_review(const char* value, size_t size);
  ::std::string* mutable_review();
  ::std::string* release_review();
  void set_allocated_review(::std::string* review);

  // int32 topicID = 1;
  void clear_topicid();
  static const int kTopicIDFieldNumber = 1;
  ::google::protobuf::int32 topicid() const;
  void set_topicid(::google::protobuf::int32 value);

  // int32 reviewID = 2;
  void clear_reviewid();
  static const int kReviewIDFieldNumber = 2;
  ::google::protobuf::int32 reviewid() const;
  void set_reviewid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pubsub.PublishMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr review_;
  ::google::protobuf::int32 topicid_;
  ::google::protobuf::int32 reviewid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pub_5fsub_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pubsub.SubscribeInfo) */ {
 public:
  SubscribeInfo();
  virtual ~SubscribeInfo();

  SubscribeInfo(const SubscribeInfo& from);

  inline SubscribeInfo& operator=(const SubscribeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeInfo(SubscribeInfo&& from) noexcept
    : SubscribeInfo() {
    *this = ::std::move(from);
  }

  inline SubscribeInfo& operator=(SubscribeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeInfo* internal_default_instance() {
    return reinterpret_cast<const SubscribeInfo*>(
               &_SubscribeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubscribeInfo* other);
  friend void swap(SubscribeInfo& a, SubscribeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeInfo* New() const final {
    return CreateMaybeMessage<SubscribeInfo>(NULL);
  }

  SubscribeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeInfo& from);
  void MergeFrom(const SubscribeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 subscriptionTopicID = 1;
  void clear_subscriptiontopicid();
  static const int kSubscriptionTopicIDFieldNumber = 1;
  ::google::protobuf::int32 subscriptiontopicid() const;
  void set_subscriptiontopicid(::google::protobuf::int32 value);

  // int32 subscriberID = 2;
  void clear_subscriberid();
  static const int kSubscriberIDFieldNumber = 2;
  ::google::protobuf::int32 subscriberid() const;
  void set_subscriberid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pubsub.SubscribeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 subscriptiontopicid_;
  ::google::protobuf::int32 subscriberid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pub_5fsub_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReceivedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pubsub.ReceivedMessage) */ {
 public:
  ReceivedMessage();
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReceivedMessage* other);
  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const final {
    return CreateMaybeMessage<ReceivedMessage>(NULL);
  }

  ReceivedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string publishedTime = 2;
  void clear_publishedtime();
  static const int kPublishedTimeFieldNumber = 2;
  const ::std::string& publishedtime() const;
  void set_publishedtime(const ::std::string& value);
  #if LANG_CXX11
  void set_publishedtime(::std::string&& value);
  #endif
  void set_publishedtime(const char* value);
  void set_publishedtime(const char* value, size_t size);
  ::std::string* mutable_publishedtime();
  ::std::string* release_publishedtime();
  void set_allocated_publishedtime(::std::string* publishedtime);

  // string review = 3;
  void clear_review();
  static const int kReviewFieldNumber = 3;
  const ::std::string& review() const;
  void set_review(const ::std::string& value);
  #if LANG_CXX11
  void set_review(::std::string&& value);
  #endif
  void set_review(const char* value);
  void set_review(const char* value, size_t size);
  ::std::string* mutable_review();
  ::std::string* release_review();
  void set_allocated_review(::std::string* review);

  // int32 subscriberID = 1;
  void clear_subscriberid();
  static const int kSubscriberIDFieldNumber = 1;
  ::google::protobuf::int32 subscriberid() const;
  void set_subscriberid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pubsub.ReceivedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publishedtime_;
  ::google::protobuf::internal::ArenaStringPtr review_;
  ::google::protobuf::int32 subscriberid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pub_5fsub_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishedTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pubsub.PublishedTime) */ {
 public:
  PublishedTime();
  virtual ~PublishedTime();

  PublishedTime(const PublishedTime& from);

  inline PublishedTime& operator=(const PublishedTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishedTime(PublishedTime&& from) noexcept
    : PublishedTime() {
    *this = ::std::move(from);
  }

  inline PublishedTime& operator=(PublishedTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishedTime* internal_default_instance() {
    return reinterpret_cast<const PublishedTime*>(
               &_PublishedTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PublishedTime* other);
  friend void swap(PublishedTime& a, PublishedTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishedTime* New() const final {
    return CreateMaybeMessage<PublishedTime>(NULL);
  }

  PublishedTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishedTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishedTime& from);
  void MergeFrom(const PublishedTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string publishedTime = 1;
  void clear_publishedtime();
  static const int kPublishedTimeFieldNumber = 1;
  const ::std::string& publishedtime() const;
  void set_publishedtime(const ::std::string& value);
  #if LANG_CXX11
  void set_publishedtime(::std::string&& value);
  #endif
  void set_publishedtime(const char* value);
  void set_publishedtime(const char* value, size_t size);
  ::std::string* mutable_publishedtime();
  ::std::string* release_publishedtime();
  void set_allocated_publishedtime(::std::string* publishedtime);

  // @@protoc_insertion_point(class_scope:pubsub.PublishedTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publishedtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pub_5fsub_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishMessage

// int32 topicID = 1;
inline void PublishMessage::clear_topicid() {
  topicid_ = 0;
}
inline ::google::protobuf::int32 PublishMessage::topicid() const {
  // @@protoc_insertion_point(field_get:pubsub.PublishMessage.topicID)
  return topicid_;
}
inline void PublishMessage::set_topicid(::google::protobuf::int32 value) {
  
  topicid_ = value;
  // @@protoc_insertion_point(field_set:pubsub.PublishMessage.topicID)
}

// int32 reviewID = 2;
inline void PublishMessage::clear_reviewid() {
  reviewid_ = 0;
}
inline ::google::protobuf::int32 PublishMessage::reviewid() const {
  // @@protoc_insertion_point(field_get:pubsub.PublishMessage.reviewID)
  return reviewid_;
}
inline void PublishMessage::set_reviewid(::google::protobuf::int32 value) {
  
  reviewid_ = value;
  // @@protoc_insertion_point(field_set:pubsub.PublishMessage.reviewID)
}

// string review = 3;
inline void PublishMessage::clear_review() {
  review_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishMessage::review() const {
  // @@protoc_insertion_point(field_get:pubsub.PublishMessage.review)
  return review_.GetNoArena();
}
inline void PublishMessage::set_review(const ::std::string& value) {
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pubsub.PublishMessage.review)
}
#if LANG_CXX11
inline void PublishMessage::set_review(::std::string&& value) {
  
  review_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.PublishMessage.review)
}
#endif
inline void PublishMessage::set_review(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.PublishMessage.review)
}
inline void PublishMessage::set_review(const char* value, size_t size) {
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.PublishMessage.review)
}
inline ::std::string* PublishMessage::mutable_review() {
  
  // @@protoc_insertion_point(field_mutable:pubsub.PublishMessage.review)
  return review_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishMessage::release_review() {
  // @@protoc_insertion_point(field_release:pubsub.PublishMessage.review)
  
  return review_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishMessage::set_allocated_review(::std::string* review) {
  if (review != NULL) {
    
  } else {
    
  }
  review_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review);
  // @@protoc_insertion_point(field_set_allocated:pubsub.PublishMessage.review)
}

// -------------------------------------------------------------------

// SubscribeInfo

// int32 subscriptionTopicID = 1;
inline void SubscribeInfo::clear_subscriptiontopicid() {
  subscriptiontopicid_ = 0;
}
inline ::google::protobuf::int32 SubscribeInfo::subscriptiontopicid() const {
  // @@protoc_insertion_point(field_get:pubsub.SubscribeInfo.subscriptionTopicID)
  return subscriptiontopicid_;
}
inline void SubscribeInfo::set_subscriptiontopicid(::google::protobuf::int32 value) {
  
  subscriptiontopicid_ = value;
  // @@protoc_insertion_point(field_set:pubsub.SubscribeInfo.subscriptionTopicID)
}

// int32 subscriberID = 2;
inline void SubscribeInfo::clear_subscriberid() {
  subscriberid_ = 0;
}
inline ::google::protobuf::int32 SubscribeInfo::subscriberid() const {
  // @@protoc_insertion_point(field_get:pubsub.SubscribeInfo.subscriberID)
  return subscriberid_;
}
inline void SubscribeInfo::set_subscriberid(::google::protobuf::int32 value) {
  
  subscriberid_ = value;
  // @@protoc_insertion_point(field_set:pubsub.SubscribeInfo.subscriberID)
}

// -------------------------------------------------------------------

// ReceivedMessage

// int32 subscriberID = 1;
inline void ReceivedMessage::clear_subscriberid() {
  subscriberid_ = 0;
}
inline ::google::protobuf::int32 ReceivedMessage::subscriberid() const {
  // @@protoc_insertion_point(field_get:pubsub.ReceivedMessage.subscriberID)
  return subscriberid_;
}
inline void ReceivedMessage::set_subscriberid(::google::protobuf::int32 value) {
  
  subscriberid_ = value;
  // @@protoc_insertion_point(field_set:pubsub.ReceivedMessage.subscriberID)
}

// string publishedTime = 2;
inline void ReceivedMessage::clear_publishedtime() {
  publishedtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivedMessage::publishedtime() const {
  // @@protoc_insertion_point(field_get:pubsub.ReceivedMessage.publishedTime)
  return publishedtime_.GetNoArena();
}
inline void ReceivedMessage::set_publishedtime(const ::std::string& value) {
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pubsub.ReceivedMessage.publishedTime)
}
#if LANG_CXX11
inline void ReceivedMessage::set_publishedtime(::std::string&& value) {
  
  publishedtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.ReceivedMessage.publishedTime)
}
#endif
inline void ReceivedMessage::set_publishedtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.ReceivedMessage.publishedTime)
}
inline void ReceivedMessage::set_publishedtime(const char* value, size_t size) {
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.ReceivedMessage.publishedTime)
}
inline ::std::string* ReceivedMessage::mutable_publishedtime() {
  
  // @@protoc_insertion_point(field_mutable:pubsub.ReceivedMessage.publishedTime)
  return publishedtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivedMessage::release_publishedtime() {
  // @@protoc_insertion_point(field_release:pubsub.ReceivedMessage.publishedTime)
  
  return publishedtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedMessage::set_allocated_publishedtime(::std::string* publishedtime) {
  if (publishedtime != NULL) {
    
  } else {
    
  }
  publishedtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publishedtime);
  // @@protoc_insertion_point(field_set_allocated:pubsub.ReceivedMessage.publishedTime)
}

// string review = 3;
inline void ReceivedMessage::clear_review() {
  review_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivedMessage::review() const {
  // @@protoc_insertion_point(field_get:pubsub.ReceivedMessage.review)
  return review_.GetNoArena();
}
inline void ReceivedMessage::set_review(const ::std::string& value) {
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pubsub.ReceivedMessage.review)
}
#if LANG_CXX11
inline void ReceivedMessage::set_review(::std::string&& value) {
  
  review_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.ReceivedMessage.review)
}
#endif
inline void ReceivedMessage::set_review(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.ReceivedMessage.review)
}
inline void ReceivedMessage::set_review(const char* value, size_t size) {
  
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.ReceivedMessage.review)
}
inline ::std::string* ReceivedMessage::mutable_review() {
  
  // @@protoc_insertion_point(field_mutable:pubsub.ReceivedMessage.review)
  return review_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivedMessage::release_review() {
  // @@protoc_insertion_point(field_release:pubsub.ReceivedMessage.review)
  
  return review_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedMessage::set_allocated_review(::std::string* review) {
  if (review != NULL) {
    
  } else {
    
  }
  review_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review);
  // @@protoc_insertion_point(field_set_allocated:pubsub.ReceivedMessage.review)
}

// -------------------------------------------------------------------

// PublishedTime

// string publishedTime = 1;
inline void PublishedTime::clear_publishedtime() {
  publishedtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishedTime::publishedtime() const {
  // @@protoc_insertion_point(field_get:pubsub.PublishedTime.publishedTime)
  return publishedtime_.GetNoArena();
}
inline void PublishedTime::set_publishedtime(const ::std::string& value) {
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pubsub.PublishedTime.publishedTime)
}
#if LANG_CXX11
inline void PublishedTime::set_publishedtime(::std::string&& value) {
  
  publishedtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.PublishedTime.publishedTime)
}
#endif
inline void PublishedTime::set_publishedtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.PublishedTime.publishedTime)
}
inline void PublishedTime::set_publishedtime(const char* value, size_t size) {
  
  publishedtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.PublishedTime.publishedTime)
}
inline ::std::string* PublishedTime::mutable_publishedtime() {
  
  // @@protoc_insertion_point(field_mutable:pubsub.PublishedTime.publishedTime)
  return publishedtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishedTime::release_publishedtime() {
  // @@protoc_insertion_point(field_release:pubsub.PublishedTime.publishedTime)
  
  return publishedtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishedTime::set_allocated_publishedtime(::std::string* publishedtime) {
  if (publishedtime != NULL) {
    
  } else {
    
  }
  publishedtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publishedtime);
  // @@protoc_insertion_point(field_set_allocated:pubsub.PublishedTime.publishedTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pub_5fsub_2eproto
