// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pub_sub.proto
#ifndef GRPC_pub_5fsub_2eproto__INCLUDED
#define GRPC_pub_5fsub_2eproto__INCLUDED

#include "pub_sub.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pubsub {

// Interface exported by the server.
class PublisherSubscriber final {
 public:
  static constexpr char const* service_full_name() {
    return "pubsub.PublisherSubscriber";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // outputs time message
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::pubsub::PublishedTime* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>> AsyncPublish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>> Subscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>> AsyncSubscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>> GetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>>(GetSubscriptionMsgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>> AsyncGetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>>(AsyncGetSubscriptionMsgRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>> PrepareAsyncGetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>>(PrepareAsyncGetSubscriptionMsgRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>* AsyncPublishRaw(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pubsub::PublishedTime>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>* SubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pubsub::ReceivedMessage>* GetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>* AsyncGetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pubsub::ReceivedMessage>* PrepareAsyncGetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::pubsub::PublishedTime* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>> AsyncPublish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pubsub::ReceivedMessage>> Subscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pubsub::ReceivedMessage>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>> AsyncSubscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pubsub::ReceivedMessage>> GetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pubsub::ReceivedMessage>>(GetSubscriptionMsgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>> AsyncGetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>>(AsyncGetSubscriptionMsgRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>> PrepareAsyncGetSubscriptionMsg(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>>(PrepareAsyncGetSubscriptionMsgRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>* AsyncPublishRaw(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pubsub::PublishedTime>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::pubsub::PublishMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pubsub::ReceivedMessage>* SubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) override;
    ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pubsub::ReceivedMessage>* GetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request) override;
    ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>* AsyncGetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pubsub::ReceivedMessage>* PrepareAsyncGetSubscriptionMsgRaw(::grpc::ClientContext* context, const ::pubsub::SubscribeInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscriptionMsg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // outputs time message
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::pubsub::PublishMessage* request, ::pubsub::PublishedTime* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer);
    virtual ::grpc::Status GetSubscriptionMsg(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::pubsub::PublishMessage* request, ::pubsub::PublishedTime* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::pubsub::PublishMessage* request, ::grpc::ServerAsyncResponseWriter< ::pubsub::PublishedTime>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::pubsub::SubscribeInfo* request, ::grpc::ServerAsyncWriter< ::pubsub::ReceivedMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscriptionMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSubscriptionMsg() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSubscriptionMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionMsg(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriptionMsg(::grpc::ServerContext* context, ::pubsub::SubscribeInfo* request, ::grpc::ServerAsyncWriter< ::pubsub::ReceivedMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Publish<WithAsyncMethod_Subscribe<WithAsyncMethod_GetSubscriptionMsg<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::pubsub::PublishMessage* request, ::pubsub::PublishedTime* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscriptionMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSubscriptionMsg() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSubscriptionMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionMsg(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pubsub::PublishMessage, ::pubsub::PublishedTime>(std::bind(&WithStreamedUnaryMethod_Publish<BaseClass>::StreamedPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::pubsub::PublishMessage* request, ::pubsub::PublishedTime* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pubsub::PublishMessage,::pubsub::PublishedTime>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Publish<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::pubsub::SubscribeInfo, ::pubsub::ReceivedMessage>(std::bind(&WithSplitStreamingMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pubsub::SubscribeInfo,::pubsub::ReceivedMessage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSubscriptionMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetSubscriptionMsg() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::pubsub::SubscribeInfo, ::pubsub::ReceivedMessage>(std::bind(&WithSplitStreamingMethod_GetSubscriptionMsg<BaseClass>::StreamedGetSubscriptionMsg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetSubscriptionMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscriptionMsg(::grpc::ServerContext* context, const ::pubsub::SubscribeInfo* request, ::grpc::ServerWriter< ::pubsub::ReceivedMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSubscriptionMsg(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pubsub::SubscribeInfo,::pubsub::ReceivedMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<WithSplitStreamingMethod_GetSubscriptionMsg<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Publish<WithSplitStreamingMethod_Subscribe<WithSplitStreamingMethod_GetSubscriptionMsg<Service > > > StreamedService;
};

}  // namespace pubsub


#endif  // GRPC_pub_5fsub_2eproto__INCLUDED
